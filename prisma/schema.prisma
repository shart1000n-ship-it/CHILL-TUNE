// Prisma schema for social app MVP
// Datasource and generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  username        String    @unique
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  bio             String?
  graduationYear  Int?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  posts           Post[]
  comments        Comment[]
  likes           Like[]

  following       Follow[]  @relation("UserFollows")
  followers       Follow[]  @relation("UserFollowedBy")

  messages        Message[] @relation("MessageSender")
  chatRoomMembers ChatRoomMember[]
  notifications   Notification[]
  podcastEpisodes PodcastEpisode[]
  airtimeLogs     AirtimeLog[]

  accounts        Account[]
  sessions        Session[]
}

model Post {
  id        String    @id @default(cuid())
  authorId  String
  content   String
  mediaUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]

  @@index([createdAt])
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Follow {
  id          String  @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower    User    @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following   User    @relation("UserFollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model ChatRoom {
  id        String            @id @default(cuid())
  name      String?
  isDirect  Boolean           @default(false)
  createdAt DateTime          @default(now())

  messages  Message[]
  members   ChatRoomMember[]
}

model ChatRoomMember {
  id      String   @id @default(cuid())
  roomId  String
  userId  String
  joinedAt DateTime @default(now())

  room    ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
}

model Message {
  id        String   @id @default(cuid())
  roomId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())

  room      ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender    User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  data      Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Post-production models

model PodcastEpisode {
  id           String   @id @default(cuid())
  userId       String
  title        String
  fileUrl      String
  durationSec  Int?
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum LiveSource {
  audio
  video
  exclusive
}

model AirtimeLog {
  id          String     @id @default(cuid())
  userId      String
  source      LiveSource
  startedAt   DateTime   @default(now())
  endedAt     DateTime?
  durationSec Int?

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([startedAt])
}

model ScheduleSlot {
  id        String   @id @default(cuid())
  title     String
  days      String   // e.g., "Mon–Fri" or "Daily"
  timeRange String   // e.g., "6:00 AM – 10:00 AM"
  createdAt DateTime @default(now())
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
